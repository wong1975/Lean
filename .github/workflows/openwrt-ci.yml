# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-CI

on:
  schedule:
    - cron: 0 20 * * *
  workflow_dispatch:
    inputs:
      manual_config:
        description: '需要进入 tmate SSH 手动 menuconfig 吗？'
        required: false
        default: 'n'

permissions:
  contents: read

jobs:

  build_openwrt:

    name: Build OpenWrt Firmware

    runs-on: ubuntu-22.04

    steps:
      - name: Space cleanup and Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Checkout OpenWrt
        uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Update feeds
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # 优先使用仓库目录下的 .config
      - name: Use repo .config if exists
        run: |
          if [ -f "./.config" ]; then
            echo "Found repo .config, using it."
          else
            echo "No .config found in repo."
          fi

      # tmate 环节自动使用 .config
      - name: SSH 远程调试（tmate）进入 cd source && make menuconfig
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.manual_config == 'y' }}
        uses: mxschmitt/action-tmate@v3

      # SSH tmate 远程调试（如果用户手动触发并需要menuconfig），并自动导入当前 .config
      #- name: SSH 远程调试（tmate）进入 cd source && make menuconfig（可导入现有 .config）
      #  if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.manual_config == 'y' }}
      #  uses: mxschmitt/action-tmate@v3

      - name: Find .config
        run: find . -name .config

      # 如果经过 tmate 修改了 .config，则保存一份 artifact 供后续步骤与用户下载
      #- name: Upload .config after tmate (if changed)
      #  if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.manual_config == 'y' }}
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: user-config
      #    path: .config

      - name: Find and list all .config files
        run: |
          find . -name .config > all-configs.txt
          cat all-configs.txt

      - name: Upload all .config files (with path structure)
        uses: actions/upload-artifact@v4
        with:
          name: all-configs
          path: |
            $(cat all-configs.txt)
      # ===============================================================
      # 
      # 检查最终 .config 是否存在，否则生成默认配置
      # - name: Generate default configuration file if .config missing
      #   run: |
      #     if [ ! -f ./.config ]; then
      #       echo "No .config found. Generating default .config..."
      #       rm -f ./.config*
      #       cat > .config <<EOF
      # CONFIG_TARGET_qualcommax=y
      # CONFIG_TARGET_qualcommax_ipq807x=y
      # CONFIG_TARGET_PROFILE="DEVICE_xiaomi_ax3600"
      # EOF
      #       make defconfig
      #     else
      #       echo ".config already exists, skip default generation."
      #       make defconfig
      #     fi
      #
      # ===============================================================

      - name: Download packages
        run: make download -j16

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Upload buildinfo
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/
